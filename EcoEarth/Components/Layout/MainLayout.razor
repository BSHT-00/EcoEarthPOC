@inherits LayoutComponentBase
@inject EcoEarthPOC.Components.Services.EcoEarthAPI_Services.UserCurrencyService userCurrencyService
@using EcoEarthPOC.Components.Services
@implements IDisposable
﻿@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components
@using EcoEarthPOC.Models
@inject EcoEarthPOC.Components.Services.EcoEarthAPI_Services.LoginEEService loginEEService
@inject NavigationManager NavigationManager


<uses-permission android:name="android.permission.INTERNET" />
<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            @if (AppVariables.IsLoggedIn == true)
            {
                @if (@UserCurrency == -1)
                {
                    <div class="alert alert-danger" role="alert">
                        <strong>Service Unavailable</strong>
                        <p>Sorry, the service is currently unavailable. Please try again later.</p>
                    </div>
                }
                <div class="user-balance">
                    <img src="Icons/icon_scanner.png" alt="Currency Icon" class="currency-icon" />
                    <span>@UserCurrency</span>
                </div>
            }


        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>


@code {
    private int UserCurrency;
    private Timer? _timer;

    // Id is passed here, must be changed before deployment
    protected override async Task OnInitializedAsync()
    {
        try
        {
            UserCurrency = await userCurrencyService.GetUserBalance();
        }
        catch (Exception)
        {
            UserCurrency = -1;
        }

        AppVariables.IsLoggedIn = Setting.UserBasicDetail != null;

        // using EEAPI to log user in
        try
        {
            var id = await loginEEService.Login(Setting.UserBasicDetail.UserID);
        }
        // if they are not logged in, this catch will be ran
        catch
        {
            NavigationManager.NavigateTo("/Login");
        }

        AppVariables.UserId = id;

        _timer = new Timer(async _ => await UpdateUserCurrency(), null, 0, 1000);
    }

    public async Task UpdateUserCurrency()
    {
        try
        {


            UserCurrency = await userCurrencyService.GetUserBalance();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception)
        {
            UserCurrency = -1;
        }
    }



    public void Dispose()
    {
        _timer?.Dispose();
    }
}