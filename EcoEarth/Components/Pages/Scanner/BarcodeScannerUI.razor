@page "/scanner/scanner/Barcoding"
@using ZXing.Net.Maui;
@using EcoEarthPOC.Components.Pages.Scanner.Data.DTOs;
@using CommunityToolkit.Maui.Views;
@inject EcoEarthPOC.Components.Services.OFFPackaging _offService

@if (_getMorePackagingInfoDTO != null)
{
    <p>Bin dive complete! We found your @_getMorePackagingInfoDTO.ProductInfo.ProductName 🗑️</p>
    <img src="Artwork/BinDiving.png" alt="Sample Image" class="artwork"  />
    <button @onclick="() => NavigateToProductInfo(scanResult)">Claim your Points!</button>
    <button @onclick="() => RefreshPage()">Try Scanning Again</button>
    <button @onclick="() => NavigateToScanner()">Return To Scanner Menu</button>
}
else
{
    <p>A knight to remember… but sadly, the wrong castle!</p>
    <img src="Artwork/Waiting.png" alt="Sample Image" class="artwork" />
    <button @onclick="() => RefreshPage()">Try Scanning Again</button>
    <button @onclick="() => NavigateToScanner()">Return To Scanner Menu</button>
}

@code 
{
    [Inject]
    NavigationManager navigationManager { get; set; }

    private string? scanResult;
    public GetMorePackagingInfoDTO _getMorePackagingInfoDTO { get; set; }

    // Initiates a Scan on page load
    protected override async Task OnInitializedAsync()
    {
        await DoScanAsync();
    }

    public async Task DoScanAsync()
    {
        scanResult = await GetScanResultAsync();

        if (scanResult == "null")
        {
            NavigateToScanner();
        }
    }

    // Initiates a scan and returns the barcode number
    public async Task<string> GetScanResultAsync()
    {
        var cameraPage = new BarcodeScanTest();
        await Application.Current.MainPage.Navigation.PushModalAsync(cameraPage);
        var barcode = await cameraPage.WaitForResultAsync();
        _getMorePackagingInfoDTO = await GetProductInformation(barcode);
        return barcode;
    }

    private async Task LoadScanner()
    {
        await DoScanAsync();
    }

    // Validates barcode number using a regular expression
    protected bool validateBarcodeNumber(string barcode)
    {
        var regex = new System.Text.RegularExpressions.Regex(@"^(?:\d{8}|\d{12}|\d{13}|\d{6})$");
        return regex.IsMatch(barcode);
    }

    // Retrives product information so that the name can be displayed prior to navigating to the product info page
    protected async Task<GetMorePackagingInfoDTO> GetProductInformation(string barcode)
    {
        try
        {
            var productInfo = await _offService.GetMorePackagingInformation(barcode);

            if (productInfo.Status == 0)
            {
                throw new Exception("Product not found");
            }

            foreach (var material in productInfo.ProductInfo.DetailedPackaging)
            {
                if (material.Material == null)
                {
                    break;
                }

                material.Material = material.Material.Replace("en:", "").Replace("-", " ").Replace("_", " ");
                material.Shape = material.Shape.Replace("en:", "").Replace("-", " ").Replace("_", " ");
            }

            return productInfo;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    // Refreshes the page
    public void RefreshPage()
    {
        navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
    }

    public void NavigateToProductInfo(string barcode)
    {
        if (validateBarcodeNumber(barcode))
        {
            navigationManager.NavigateTo($"/scanner/ProductInfo/{barcode}");
        }
        else
        {
            scanResult = "Invalid barcode number";
        }
    }

    // Takes user back to scanner menu
    public void NavigateToScanner()
    {
        navigationManager.NavigateTo("/scanner/scanner");
    }
}
