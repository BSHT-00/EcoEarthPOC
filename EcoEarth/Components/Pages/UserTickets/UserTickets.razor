@page "/usertickets"
@using CommunityToolkit.Maui.Core
@using EcoEarthPOC.Components.Services.EcoEarthAPI_Services
@using CommunityToolkit.Maui.Views;
@using CommunityToolkit.Maui.Alerts;
@using System.Text.RegularExpressions

@inject UserTicketsService _userTicketsService

<p>Having issues? Create a ticket! Please enter any details you are able to provide below:</p>

<h5 class="tick-prompt">Ticket Title (Briefly describe your issue)</h5>
<label for="inputText"> </label>
<input type="text" class="text-input" id="TickTitle" @bind="TickTitle" rows="8" />


<h5 class="tick-prompt">Ticket Details (Explain the issue in detail) </h5>
<label for="inputText"></label>
<textarea id="TickDescription" class="text-input" @bind="TickDesc" rows="8" cols="40"></textarea>


<p>So we can contact you directly, leave your email here. This is not required though </p>

<h5 class="tick-prompt">Email Address (Optional)</h5>
<label for="inputText"></label>
<input type="text" id="TickEmail" @bind="TickEmail" class="text-input"/>

<br />
<button @onclick="Submit" class="sub-btn">Submit</button>

<p>If you are having issues and would prefer to contact us directly, our team are available by email:</p>

<div class="email-box">
    <div class="avatar">
        <img src="Avatars/con4.png" alt="Avatar" />
    </div>
    <div class="email">d3330384@live.tees.ac.uk</div>
</div>

<div class="email-box">
    <div class="avatar">
        <img src="Avatars/con6.png" alt="Avatar" />
    </div>
    <div class="email">q2043246@live.tees.ac.uk</div>
</div>

<div class="email-box">
    <div class="avatar">
        <img src="Avatars/con9.png" alt="Avatar" />
    </div>
    <div class="email">d3266548@live.tees.ac.uk</div>
</div>

<div class="email-box">
    <div class="avatar">
        <img src="Avatars/con7.png" alt="Avatar" />
    </div>
    <div class="email">d3158960@live.tees.ac.uk</div>
</div>

<div class="email-box">
    <div class="avatar">
        <img src="Avatars/con34.png" alt="Avatar" />
    </div>
    <div class="email">s3028837@live.tees.ac.uk</div>
</div>



@code 
{
    private string TickTitle { get; set; }
    private string TickDesc { get; set; }
    private string TickEmail { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    private async Task Submit()
    {
        // Validating and displaying popups when input is not valid
        if (string.IsNullOrWhiteSpace(TickTitle) || string.IsNullOrWhiteSpace(TickDesc))
        {
            await ShowToast("Title and Description are required.");
            return;
        }
        else if (!string.IsNullOrEmpty(TickEmail))
        {
            if (!validateEmail(TickEmail))
            {
                await ShowToast("Invalid email address.");
                return;
            }
        }
        else if(TickTitle.Length < 10)
        {
            await ShowToast("Title must be more than 10 characters");
            return;
        }
        else if (TickDesc.Length < 40)
        {
            await ShowToast("Description must be more than 40 characters");
            return;
        }

        // Creating ticket
        var ticket = new EcoEarthPOC.Components.Pages.UserTickets.DTOs.UserTicketsDTO
        {
            Title = TickTitle,
            Description = TickDesc,
            UserEmail = TickEmail,
            Date = DateOnly.FromDateTime(DateTime.Now)
        };

        // Posting and providing confimation
        await _userTicketsService.PostTicketAsync(ticket);
        await ShowToast("Ticket submitted successfully.");
        RefreshPage();
    }

    // Checks Email (if provided) is in valid format using a reg expression found here: https://mailtrap.io/blog/validate-email-address-c/
    public bool validateEmail(string email)
    {
        Regex regex = new Regex(@"^[^@\s]+@[^@\s]+\.(com|net|org|gov)$");
        return regex.IsMatch(email);
    }

    public void RefreshPage()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    // Displays a toast (popup)
    // Part of the CommunityToolkit
    private async Task ShowToast(string message)
    {
        CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();
        ToastDuration duration = ToastDuration.Short;
        double fontSize = 14;

        var toast = Toast.Make(message, duration, fontSize);

        await toast.Show(cancellationTokenSource.Token);
    }
}
