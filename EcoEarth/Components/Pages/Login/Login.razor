@page "/Login"
@using EcoEarthPOC.Models
@using EcoEarthPOC.Components.Services
@using System.IdentityModel.Tokens.Jwt
@using Newtonsoft.Json
@using System.Text.Json
@inject IAppService AppService
@inject NavigationManager NavigationManager
@inject EcoEarthPOC.Components.Services.EcoEarthAPI_Services.LoginEEService loginEEService

<div class="eco-login-container">
    <div class="eco-login-card">
        <div class="eco-brand-header">
            <div class="eco-logo-circle">
                <i class="fas fa-globe eco-logo-icon"></i>
            </div>
            <h1 class="eco-brand-title">EcoEarth</h1>
            <p class="eco-brand-subtitle">Scan. Recycle. Sustain. Earn.</p>
            <p class="eco-brand-subtitle"> Great to see you, let's make an impact together 😊!
                Please log in or register to continue.</p>
        </div>

        <EditForm Model="@loginModel" OnValidSubmit="Submit">
            <DataAnnotationsValidator />

            <div class="eco-form-group">
                <label class="eco-form-label">Email Address</label>
                <div class="eco-input-group">
                    <span class="eco-input-icon"><i class="fas fa-envelope"></i></span>
                    <InputText @bind-Value="loginModel.Email" class="eco-form-control" placeholder="Enter your email" />
                </div>
                <ValidationMessage For="@(() => loginModel.Email)" class="eco-validation-message" />
            </div>

            <div class="eco-form-group">
                <label class="eco-form-label">Password</label>
                <div class="eco-input-group">
                    <span class="eco-input-icon"><i class="fas fa-lock"></i></span>
                    <InputText type="password" @bind-Value="loginModel.Password" class="eco-form-control" placeholder="Enter your password" />
                </div>
                <ValidationMessage For="@(() => loginModel.Password)" class="eco-validation-message" />
            </div>

            <div class="eco-form-options">
                <div class="eco-form-check">
                    <input type="checkbox" class="eco-form-check-input" id="rememberMe" />
                    <label class="eco-form-check-label" for="rememberMe">Remember me</label>
                </div>
                <a href="#" class="eco-forgot-password">Forgot password?</a>
            </div>

            <button type="submit" class="eco-login-btn">
                <span class="@_spinnerClass" role="status" aria-hidden="true"></span>
                Sign In
            </button>

            <div class="eco-register-link">
                New to EcoEarth? <NavLink href="Registration" class="eco-nav-link">Create account</NavLink>
            </div>
        </EditForm>
    </div>

    <div class="eco-background-elements">
        <div class="eco-bg-leaf"><i class="fas fa-leaf"></i></div>
        <div class="eco-bg-recycle"><i class="fas fa-recycle"></i></div>
        <div class="eco-bg-seedling"><i class="fas fa-seedling"></i></div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string _spinnerClass = "";

    private async void Submit()
    {
        _spinnerClass = "spinner-border spinner-border-sm";
        var response = await AppService.AuthenticateUser(loginModel);

        if (!string.IsNullOrWhiteSpace(response))
        {
            var handler = new JwtSecurityTokenHandler();
            var jsonToken = handler.ReadToken(response) as JwtSecurityToken;

            string userID = jsonToken.Claims.FirstOrDefault(f => f.Type == JwtRegisteredClaimNames.NameId)?.Value;
            string name = jsonToken.Claims.FirstOrDefault(f => f.Type == JwtRegisteredClaimNames.UniqueName)?.Value;
            string email = loginModel.Email;

            var userBasicDetail = new UserBasicDetail
                {
                    UserID = userID,
                    Name = name,
                    Email = email,
                    Token = response
                };

            string userBasicDetailJson = JsonConvert.SerializeObject(userBasicDetail);
            await SecureStorage.SetAsync(nameof(Setting.UserBasicDetail), userBasicDetailJson);
            Setting.UserBasicDetail = userBasicDetail;

            // using EEAPI to log user in using LoginId
            AppVariables.UserId = await loginEEService.Login(userBasicDetail.UserID);
            AppVariables.IsLoggedIn = true;

            NavigationManager.NavigateTo("/");
        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Error", "Invalid email or password", "OK");
        }

        _spinnerClass = "";
        StateHasChanged();
    }
}