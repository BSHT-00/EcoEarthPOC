@page "/Login"
@using EcoEarthPOC.Models
@using EcoEarthPOC.Components.Services
@inject IAppService AppService;
<h3 class="text-center text-primary">Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label class="form-label">Email Address</label>
        <input type="email" @bind-value="loginModel.Email" class="form-control" placeholder="Enter your email" />
        <ValidationMessage For="@(() => loginModel.Email)" />
    </div>

    <div class="mt-3 form-group">
        <label class="form-label">Password</label>
        <input type="password" @bind-value="loginModel.Password" class="form-control" placeholder="Enter your password" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>

    <div class="form-check mt-3">
        <input type="checkbox" class="form-check-input" />
        <label class="form-check-label">Remember me</label>
    </div>

    <div class="mt-2 text-end">
        <NavLink class="nav-link" href="Registration">
            <span class="text-primary">Create a new account?</span>
        </NavLink>
    </div>

    <div class="text-center mt-4">
        <button class="btn btn-primary btn-lg" type="submit">
            <span class="@_spinnerClass" role="status" aria-hidden="true"></span>
            Sign In
        </button>
    </div>
</EditForm>

@code {
    LoginModel loginModel = new LoginModel();

    private string _spinnerClass = "";
    private async void Submit()
    {
        _spinnerClass = "spinner-border spinner-border-sm";
        var response = await AppService.AuthenticateUser(loginModel);
        if (!string.IsNullOrWhiteSpace(response))
        {
            await App.Current.MainPage.DisplayAlert("Success", "Valid credentials", "OK");
        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Error", "Invalid credentials", "OK");
        }
        await Task.Delay(500);
        _spinnerClass = "";
        this.StateHasChanged();
    }
}
